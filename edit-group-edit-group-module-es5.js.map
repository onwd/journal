{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","webpack:///src/app/public/journal/edit-group/edit-group.component.ts","webpack:///src/app/public/journal/edit-group/edit-group.html","webpack:///src/app/public/journal/edit-group/edit-group.module.ts","webpack:///src/app/public/journal/edit-group/edit-group.routing.ts"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ctx_r0","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteActivatedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocompleteDefaultOptions","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_autoActiveFirstOption","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","nativeElement","length","_setVisibilityClasses","markForCheck","event","classList","value","split","reduce","className","trim","ɵfac","MatAutocomplete_Factory","t","ɵcmp","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","_t","optionGroups","viewQuery","MatAutocomplete_Query","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","asObservable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","clickTarget","_isInsideShadowRoot","composedPath","target","formField","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","activeItemIndex","labelCount","_setScrollTop","newScrollPosition","_getScrollTop","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","panelClass","abovePositions","positions","withPositions","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","_a","defaultView","tabOut","_getOutsideClickStream","detachments","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","autocompleteDisabled","toString","MatAutocompleteModule","ɵmod","ɵinj","MatAutocompleteModule_Factory","imports","ngJitMode","declarations","exports","PublicJournalEditGroupPageComponent","activatedRoute","dataService","router","addLearnerControl","snapshot","paramMap","get","group","groups","find","Number","subjects","learners","learnerOptions","valueChanges","query","selectableLearners","filter","learner","name","toLowerCase","includes","subject","lessons","push","navigate","learnersIds","setValue","addLearnerInput","blur","learnerId","subjectIndex","findIndex","item","splice","createSubject","templateUrl","styleUrls","PublicJournalEditGroupPageModule","routes","path","component","PublicJournalEditGroupPageRoutingModule","forChild"],"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","file":"edit-group-edit-group-module-es5.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.option;\n}\n/**\n * Event object that is emitted when an autocomplete option is activated.\n * @record\n */\nfunction MatAutocompleteActivatedEvent() { }\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.option;\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Default `mat-autocomplete` options that can be overridden.\n * @record\n */\nfunction MatAutocompleteDefaultOptions() { }\nif (false) {\n    /**\n     * Whether the first option should be highlighted when an autocomplete panel is opened.\n     * @type {?|undefined}\n     */\n    MatAutocompleteDefaultOptions.prototype.autoActiveFirstOption;\n}\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Emits whenever an option is activated using the keyboard.\n         */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        }));\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_autoActiveFirstOption;\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._activeOptionChanges;\n    /**\n     * Manages active item in option list based on key events.\n     * @type {?}\n     */\n    MatAutocomplete.prototype._keyManager;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.showPanel;\n    /** @type {?} */\n    MatAutocomplete.prototype._isOpen;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.template;\n    /**\n     * Element for the panel containing the autocomplete options.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panel;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.options;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionGroups;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panelWidth;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionSelected;\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.opened;\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.closed;\n    /**\n     * Emits whenever an option is activated using the keyboard.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionActivated;\n    /** @type {?} */\n    MatAutocomplete.prototype._classList;\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-origin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    MatAutocompleteOrigin.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => window.addEventListener('blur', this._windowBlurHandler)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        /** @type {?} */\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        /** @type {?} */\n        const panelClass = 'mat-autocomplete-panel-above';\n        /** @type {?} */\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocompleteTrigger.ngAcceptInputType_autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._componentDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._scrollStrategy;\n    /**\n     * Old value of the native input. Used to work around issues with the `input` event on IE.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._previousValue;\n    /**\n     * Strategy that is used to position the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._positionStrategy;\n    /**\n     * Whether or not the label state is being overridden.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._manuallyFloatingLabel;\n    /**\n     * The subscription for closing actions (some are bound to document).\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closingActionsSubscription;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._canOpenOnNextFocus;\n    /**\n     * Whether the element is inside of a ShadowRoot component.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._isInsideShadowRoot;\n    /**\n     * Stream of keyboard events that can close the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._windowBlurHandler;\n    /**\n     * `View -> model callback called when value changes`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onChange;\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onTouched;\n    /**\n     * The autocomplete panel to be attached to this trigger.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.position;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocompleteAttribute;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayAttached;\n    /**\n     * Stream of autocomplete option selections.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.optionSelections;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._formField;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n        CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatAutocomplete,\n        MatOptionModule,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    CdkScrollableModule,\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","import { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport {\n  DataService,\n  Group,\n  Learner,\n  Subject\n} from '@shared/data';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport { isString, last, without } from 'lodash';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'public-journal-edit-group-page',\n  templateUrl: 'edit-group.html',\n  styleUrls: ['edit-group.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PublicJournalEditGroupPageComponent implements OnInit {\n  @ViewChild('addLearnerInput') addLearnerInput: ElementRef;\n\n  public group: Group;\n  public subjects: Array<Subject>;\n  public addLearnerControl: FormControl;\n  public learnerOptions: Observable<Array<Learner>>;\n  public learners: Array<Learner>;\n\n  public get selectableLearners(): Array<Learner> {\n    return this.learners.filter((learner) => !this.group.learnersIds.includes(learner.id));\n  }\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService,\n    private router: Router\n  ) {\n    this.addLearnerControl = new FormControl();\n  }\n\n  public ngOnInit(): void {\n    const id = this.activatedRoute.snapshot.paramMap.get('id');\n\n    this.group = this.dataService.groups.find((group) => group.id === Number(id));\n    this.subjects = this.group.subjects;\n    this.learners = this.dataService.learners;\n\n    this.learnerOptions = this.addLearnerControl.valueChanges\n      .pipe(\n        startWith(''),\n        filter((query) => isString(query)),\n        map((query) => this.selectableLearners\n          .filter((learner) => learner.name.toLowerCase().includes(query.toLowerCase()))\n        )\n      );\n  }\n\n  public createSubject(): void {\n    const subject = new Subject({\n      id: (this.subjects.length > 0)\n        ? last(this.subjects).id + 1\n        : 1,\n      lessons: []\n    });\n\n    this.subjects.push(subject);\n\n    this.router.navigate(['/journal/groups', this.group.id, 'subjects', subject.id]);\n  }\n\n  public onLearnerSelected(event: MatAutocompleteSelectedEvent): void {\n    this.group.learnersIds.push(event.option.value);\n    this.addLearnerControl.setValue('');\n    this.addLearnerInput.nativeElement.blur();\n  }\n\n  public getLearnerById(id: number): Learner {\n    return this.learners.find((learner) => learner.id === id);\n  }\n\n  public deleteLearner(learnerId: number): void {\n    this.group.learnersIds = without(this.group.learnersIds, learnerId);\n  }\n\n  public deleteSubject(subject: Subject): void {\n    const subjectIndex = this.subjects.findIndex((item) => item.id === subject.id);\n\n    this.subjects.splice(subjectIndex, 1);\n  }\n}\n","<div class=\"edit-group-page\">\n  <mat-toolbar color=\"primary\">\n    <span>{{group.name}}</span>\n  </mat-toolbar>\n\n  <form class=\"form\">\n    <mat-form-field class=\"form-field\">\n      <mat-label>Название</mat-label>\n      <input [(ngModel)]=\"group.name\"\n        matInput\n        name=\"name\" />\n    </mat-form-field>\n  </form>\n\n  <div class=\"table subjects-table\">\n    <div class=\"table-row table-head\">\n      <div class=\"table-cell table-content\">Предметы</div>\n    </div>\n    <div *ngFor=\"let subject of subjects\"\n      [routerLink]=\"['/journal/groups', group.id, 'subjects', subject.id]\"\n      matRipple\n      class=\"table-row\">\n      <div class=\"table-cell table-content subjects-table-name\">{{subject.name || '&nbsp;'}}</div>\n      <div class=\"table-cell table-content subjects-table-actions\">\n        <button (click)=\"$event.stopPropagation(); deleteSubject(subject)\" mat-flat-button color=\"warn\">Удалить</button>\n      </div>\n    </div>\n    <div (click)=\"createSubject()\"\n      matRipple\n      class=\"table-row table-footer\">\n      <div class=\"table-cell table-content\">\n        <mat-icon>add</mat-icon>\n        Добавить предмет\n      </div>\n    </div>\n  </div>\n\n  <div class=\"table learners-table\">\n    <div class=\"table-row table-head\">\n      <div class=\"table-cell table-content\">Обучающиеся</div>\n    </div>\n    <div *ngFor=\"let learnerId of group.learnersIds\" class=\"table-row\">\n      <div class=\"table-cell table-content\">\n        {{getLearnerById(learnerId).name || '&nbsp;'}}\n      </div>\n      <div class=\"table-cell table-content learners-table-actions\">\n        <button (click)=\"$event.stopPropagation(); deleteLearner(learnerId)\" mat-flat-button color=\"warn\">Удалить</button>\n      </div>\n    </div>\n    <div *ngIf=\"selectableLearners.length > 0\" class=\"table-row table-footer\">\n      <div class=\"table-cell table-content\">\n        <mat-form-field style=\"width: 100%\">\n          <input type=\"text\"\n            placeholder=\"Добавить обучающегося\"\n            matInput\n            [formControl]=\"addLearnerControl\"\n            [matAutocomplete]=\"auto\"\n            #addLearnerInput>\n          <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onLearnerSelected($event)\">\n            <mat-option *ngFor=\"let learnerOption of learnerOptions | async\" [value]=\"learnerOption.id\">\n              {{learnerOption.name}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\nimport { PublicJournalEditGroupPageComponent } from './edit-group.component';\nimport { PublicJournalEditGroupPageRoutingModule } from './edit-group.routing';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [\n    PublicJournalEditGroupPageComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatToolbarModule,\n    RouterModule,\n    TranslateModule,\n    PublicJournalEditGroupPageRoutingModule\n  ],\n  providers: []\n})\nexport class PublicJournalEditGroupPageModule { }\n","import { PublicJournalEditGroupPageComponent } from './edit-group.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PublicJournalEditGroupPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PublicJournalEditGroupPageRoutingModule { }\n"]}